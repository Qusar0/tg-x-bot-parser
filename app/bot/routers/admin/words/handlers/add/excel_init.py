from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile, BufferedInputFile
from app.bot.routers.admin import admin_router
from app.bot.callback_data import WordExcelLoadCb, ChooseChatForExcelCb
from app.bot.routers.admin.words.State import WordState
from app.bot.routers.admin.words.Markup import Markup
from app.database.repo.Word import WordRepo
from .loading_excel_word import ExcelWordParser
from app.enums import WordType


@admin_router.callback_query(WordExcelLoadCb.filter())
async def excel_upload_handler(cb: types.CallbackQuery, callback_data: WordExcelLoadCb, state: FSMContext):
    await state.update_data(word_type=callback_data.word_type)

    word_type_name = "–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" if callback_data.word_type.value == "keyword" else "—Å—Ç–æ–ø-—Å–ª–æ–≤"

    await cb.message.edit_text(
        f"üìó <b>–ó–∞–≥—Ä—É–∑–∫–∞ {word_type_name} –∏–∑ Excel</b>\n\n"
        f"üí¨ –í –∫–∞–∫–æ–π —á–∞—Ç –¥–æ–±–∞–≤–∏—Ç—å {word_type_name}?",
        reply_markup=Markup.choose_central_chat_for_excel(callback_data.word_type)
    )
    await cb.answer()


@admin_router.callback_query(ChooseChatForExcelCb.filter())
async def choose_chat_for_excel(cb: types.CallbackQuery, callback_data: ChooseChatForExcelCb, state: FSMContext):
    await state.update_data(central_chat_id=callback_data.chat_id)
    await state.set_state(WordState.upload_excel)

    word_type = callback_data.word_type
    word_type_name = "–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" if word_type.value == "keyword" else "—Å—Ç–æ–ø-—Å–ª–æ–≤"

    template_data = ExcelWordParser.create_template_excel(word_type)
    template_file = BufferedInputFile(template_data, filename=f"template_{word_type.value}.xlsx")

    await cb.message.answer_document(
        document=template_file,
        caption=f"üìó <b>–ó–∞–≥—Ä—É–∑–∫–∞ {word_type_name} –∏–∑ Excel</b>\n\n"
                f"üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º {word_type_name}.\n\n"
                f"üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:</b>\n"
                f"‚Ä¢ –§–æ—Ä–º–∞—Ç: .xlsx –∏–ª–∏ .xls\n"
                f"‚Ä¢ –°—Ç–æ–ª–±–µ—Ü –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è: <code>{word_type.value}</code>\n"
                f"‚Ä¢ –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ\n"
                f"‚Ä¢ –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫\n\n"
                f"üì• <b>–í—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞</b>\n"
                f"–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ!",
        reply_markup=Markup.cancel_action()
    )

    await cb.message.delete()
    await cb.answer()


@admin_router.message(F.document, WordState.upload_excel)
async def process_excel_upload(message: types.Message, state: FSMContext):
    data = await state.get_data()
    word_type_str = data.get('word_type')

    word_type = WordType(word_type_str)

    document = message.document

    await message.answer("‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Excel —Ñ–∞–π–ª...</b>")

    file = await message.bot.get_file(document.file_id)
    file_content = await message.bot.download_file(file.file_path)

    words = ExcelWordParser.parse_excel_file(file_content.getvalue(), word_type)

    central_chat_id = data.get('central_chat_id')

    if not central_chat_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞: —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=Markup.cancel_action()
        )
        return

    added_words = await WordRepo.add_many(words, word_type, central_chat_id)

    word_type_name = "–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤" if word_type.value == "keyword" else "—Å—Ç–æ–ø-—Å–ª–æ–≤"

    success_message = (
        f"‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ {word_type_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {len(words)}\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {len(added_words)}\n"
        f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(words) - len(added_words)}"
    )

    await message.answer(
        success_message,
        reply_markup=Markup.open_menu(word_type)
    )

    await state.clear()


@admin_router.callback_query(F.data == "cancel_action")
async def cancel_excel_upload(cb: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()

    if current_state == WordState.upload_excel.state:
        data = await state.get_data()
        word_type = data.get('word_type')

        await state.clear()

        if word_type:
            word_type_enum = WordType(word_type)
            await cb.message.delete()
            await cb.message.answer(
                f"‚ùå <b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
                reply_markup=Markup.open_menu(word_type_enum)
            )
        else:
            await cb.message.delete()
            await cb.message.answer("‚ùå <b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>")
        
        await cb.answer()
