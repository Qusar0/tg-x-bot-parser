from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.enums import WordType
from app.database.repo.Chat import ChatRepo
from app.bot.callback_data import (
    back_menu_cb,
    ChooseCentralChatForWordCb,
    DeleteAllWordsCb,
    WordMenuAddCb,
    WordMenuCb,
    WordMenuDeleteCb,
    WordShowCb,
    WordUploadingCb,
)


class Markup:
    @staticmethod
    def back_menu(word_type: WordType) -> InlineKeyboardMarkup:
        markup = InlineKeyboardBuilder()
        markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=WordMenuCb(word_type=word_type).pack()))
        return markup.as_markup()

    @staticmethod
    async def choose_central_chat(word_type: WordType) -> InlineKeyboardMarkup:
        markup = InlineKeyboardBuilder()

        for chat in await ChatRepo.get_central_chats():
            markup.row(
                InlineKeyboardButton(
                    text=chat.title,
                    callback_data=ChooseCentralChatForWordCb(word_type=word_type, chat_id=chat.telegram_id).pack(),
                )
            )

        markup.row(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=back_menu_cb))

        return markup.as_markup()

    @staticmethod
    def delete_all_words(word_type: WordType) -> InlineKeyboardMarkup:
        markup = InlineKeyboardBuilder()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        is_keyword = word_type in [WordType.tg_keyword, WordType.x_keyword]
        is_stopword = word_type in [WordType.tg_stopword, WordType.x_stopword]
        is_filter_word = word_type in [WordType.tg_filter_word, WordType.x_filter_word]
        
        platform = "TG" if word_type.value.startswith("tg_") else "X"
        
        if is_keyword:
            text = f"‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á-—Å–ª–æ–≤–∞ {platform}"
        elif is_stopword:
            text = f"‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ {platform}"
        elif is_filter_word:
            text = f"‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä-—Å–ª–æ–≤–∞ {platform}"

        markup.row(
            InlineKeyboardButton(
                text=text,
                callback_data=DeleteAllWordsCb(word_type=word_type).pack(),
            )
        )
        markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=WordMenuCb(word_type=word_type).pack()))
        return markup.as_markup()

    @staticmethod
    def cancel_action() -> InlineKeyboardMarkup:
        markup = InlineKeyboardBuilder()
        markup.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))
        return markup.as_markup()

    @staticmethod
    def open_menu(word_type: WordType) -> InlineKeyboardMarkup:
        markup = InlineKeyboardBuilder()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–æ–≤–∞ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        is_keyword = word_type in [WordType.tg_keyword, WordType.x_keyword]
        is_stopword = word_type in [WordType.tg_stopword, WordType.x_stopword]
        is_filter_word = word_type in [WordType.tg_filter_word, WordType.x_filter_word]
        
        platform = "TG" if word_type.value.startswith("tg_") else "X"
        
        if is_keyword:
            markup.row(
                InlineKeyboardButton(
                    text=f"‚ûï –ö–ª—é—á-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuAddCb(word_type=word_type).pack(),
                ),
                InlineKeyboardButton(
                    text=f"‚ûñ –ö–ª—é—á-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuDeleteCb(word_type=word_type).pack(),
                ),
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üëÅÔ∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á-—Å–ª–æ–≤ {platform}",
                    callback_data=WordShowCb(word_type=word_type).pack())
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üìó –°–ø–∏—Å–æ–∫ –∫–ª—é—á-—Å–ª–æ–≤ {platform} Excel",
                    callback_data=WordUploadingCb(word_type=word_type).pack()
                )
            )

        elif is_stopword:
            markup.row(
                InlineKeyboardButton(
                    text=f"‚ûï –°—Ç–æ–ø-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuAddCb(word_type=word_type).pack(),
                ),
                InlineKeyboardButton(
                    text=f"‚ûñ –°—Ç–æ–ø-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuDeleteCb(word_type=word_type).pack(),
                ),
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üëÅÔ∏è –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ {platform}",
                    callback_data=WordShowCb(word_type=word_type).pack())
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üìó –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ {platform} Excel",
                    callback_data=WordUploadingCb(word_type=word_type).pack()
                )
            )
        elif is_filter_word:
            markup.row(
                InlineKeyboardButton(
                    text=f"‚ûï –§–∏–ª—å—Ç—Ä-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuAddCb(word_type=word_type).pack(),
                ),
                InlineKeyboardButton(
                    text=f"‚ûñ –§–∏–ª—å—Ç—Ä-—Å–ª–æ–≤–∞ {platform}",
                    callback_data=WordMenuDeleteCb(word_type=word_type).pack(),
                ),
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üëÅÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä-—Å–ª–æ–≤ {platform}",
                    callback_data=WordShowCb(word_type=word_type).pack())
            )
            markup.row(
                InlineKeyboardButton(
                    text=f"üìó –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä-—Å–ª–æ–≤ {platform} Excel",
                    callback_data=WordUploadingCb(word_type=word_type).pack()
                )
            )

        markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=back_menu_cb))

        return markup.as_markup()

    @staticmethod
    async def choose_central_chat_for_excel(word_type: WordType) -> InlineKeyboardMarkup:
        from app.bot.callback_data import ChooseChatForExcelCb
        markup = InlineKeyboardBuilder()

        for chat in await ChatRepo.get_central_chats():
            markup.row(
                InlineKeyboardButton(
                    text=chat.title,
                    callback_data=ChooseChatForExcelCb(word_type=word_type, chat_id=chat.telegram_id).pack(),
                )
            )

        markup.row(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=WordMenuCb(word_type=word_type).pack()))

        return markup.as_markup()

    @staticmethod
    def choose_add_words(word_type: WordType) -> InlineKeyboardMarkup:
        from app.bot.callback_data import WordExcelLoadCb, WordManualAddCb
        markup = InlineKeyboardBuilder()
        markup.row(
            InlineKeyboardButton(text='üìó –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Excel', callback_data=WordExcelLoadCb(word_type=word_type).pack())
        )
        markup.row(
            InlineKeyboardButton(text="ü§ö –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=WordManualAddCb(word_type=word_type).pack())
        )
        markup.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –®–∞–≥ –Ω–∞–∑–∞–¥", callback_data=WordMenuCb(word_type=word_type).pack()))

        return markup.as_markup()
