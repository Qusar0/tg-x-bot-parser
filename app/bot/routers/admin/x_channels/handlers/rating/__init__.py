from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from app.bot.routers.admin import admin_router

router = Router()
from app.bot.routers.admin.x_channels.Markup import Markup
from app.database.repo.XChannel import XChannelRepo
from app.bot.callback_data import (
    x_channels_rating_cb,
    x_channels_without_rating_cb,
    x_channels_re_evaluation_cb,
    XChannelRatingCb,
)


@router.callback_query(F.data == x_channels_rating_cb)
async def rating_x_channels_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await cb.message.edit_text(
        "<b>üèÜ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ X –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=Markup.rating_x_channels_menu()
    )


@router.callback_query(F.data == x_channels_without_rating_cb)
async def show_zero_rating_x_channels(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    channels = await XChannelRepo.get_by_rating(0)

    if not channels:
        await cb.answer("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —É–∂–µ –æ—Ü–µ–Ω–µ–Ω—ã!", show_alert=True)
        return

    await cb.answer()
    await cb.message.edit_text(
        f"<b>üèÜ X –∫–∞–Ω–∞–ª—ã –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ ({len(channels)} —à—Ç.)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=await Markup.channel_list_for_rating(channels, x_channels_rating_cb)
    )


@router.callback_query(F.data == x_channels_re_evaluation_cb)
async def show_all_x_channels_for_reevaluation(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    channels = await XChannelRepo.get_by_rating_greater_than(0)

    if not channels:
        await cb.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    await cb.answer()
    await cb.message.edit_text(
        f"<b>üîÑ –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ X –∫–∞–Ω–∞–ª–æ–≤ ({len(channels)} —à—Ç.)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=await Markup.channel_list_for_rating(channels, x_channels_rating_cb)
    )


@router.callback_query(F.data.startswith("rate_x_channel_"))
async def choose_rating_for_x_channel(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    channel_id = int(cb.data.replace("rate_x_channel_", ""))

    channel = await XChannelRepo.get_by_id(channel_id)

    if not channel:
        await cb.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await cb.answer()
    current_rating = f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {channel.rating} ‚≠ê" if channel.rating > 0 else "–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚ùå –Ω–µ –æ—Ü–µ–Ω—ë–Ω"

    await cb.message.edit_text(
        f"<b>üèÜ –û—Ü–µ–Ω–∫–∞ X –∫–∞–Ω–∞–ª–∞</b>\n\n"
        f"<b>–ö–∞–Ω–∞–ª:</b> {channel.title}\n"
        f"<b>URL:</b> {channel.url}\n"
        f"<b>{current_rating}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10:",
        reply_markup=Markup.rating_keyboard(channel_id)
    )


@router.callback_query(XChannelRatingCb.filter())
async def handle_x_channel_rating_selection(cb: types.CallbackQuery, callback_data: XChannelRatingCb, state: FSMContext):
    await state.set_state(None)

    channel_id = callback_data.channel_id
    rating = callback_data.rating

    success = await XChannelRepo.update_rating(channel_id, rating)

    if success:
        channel = await XChannelRepo.get_by_id(channel_id)

        await cb.answer(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating} ‚≠ê", show_alert=True)
        await cb.message.edit_text(
            f"<b>‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª:</b> {channel.title}\n"
            f"<b>URL:</b> {channel.url}\n"
            f"<b>–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {rating} ‚≠ê",
            reply_markup=Markup.rating_x_channels_menu()
        )
    else:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)
