import re
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from loguru import logger

from app.bot.routers.admin.x_channels.Markup import Markup
from app.bot.routers.admin.x_channels.State import XChannelStates
from app.bot.routers.admin.x_channels.phrases import cancel_chat_action
from app.database.repo.XChannel import XChannelRepo
from app.bot.callback_data import x_channels_choose_add_cb, x_channels_add_cb, x_channels_add_excel_cb, x_channels_cb
from .excel_routes import router as excel_router

router = Router()
router.include_router(excel_router)


@router.callback_query(lambda c: c.data == x_channels_choose_add_cb)
async def choose_add_x_channels_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ X –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=Markup.choose_add_x_channels()
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == x_channels_add_cb)
async def add_x_channels_manual_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ X –∫–∞–Ω–∞–ª–æ–≤ –≤—Ä—É—á–Ω—É—é</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å—Å—ã–ª–∫—É:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: SpaceX https://x.com/SpaceX\n"
        "–ò–ª–∏: West (Scarlett's Dad) https://x.com/MarlonTag",
        reply_markup=Markup.cancel_action()
    )
    await state.set_state(XChannelStates.waiting_for_manual_input)
    await callback.answer()


@router.callback_query(lambda c: c.data == x_channels_cb)
async def back_to_x_channels_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üîó <b>X –∫–∞–Ω–∞–ª—ã</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ X –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        reply_markup=Markup.x_channels_menu()
    )
    await callback.answer()


@router.message(XChannelStates.waiting_for_manual_input)
async def process_manual_x_channel_input(message: types.Message, state: FSMContext):
    if message.text == cancel_chat_action:
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=Markup.remove())
        await state.clear()
        return

    try:
        text = message.text.strip()
        
        # –ò—â–µ–º URL –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http –∏–ª–∏ x.com)
        url_pattern = r'(https?://[^\s]+|x\.com/[^\s]+)'
        url_match = re.search(url_pattern, text)
        
        if not url_match:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: SpaceX https://x.com/SpaceX",
                reply_markup=Markup.back_menu()
            )
            return
        
        url = url_match.group(1)
        title = text[:url_match.start()].strip()
        
        if not title:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: SpaceX https://x.com/SpaceX",
                reply_markup=Markup.back_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_channel = await XChannelRepo.get_by_url(url)
        if existing_channel:
            await message.answer(
                f"‚ùå –ö–∞–Ω–∞–ª —Å URL {url} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=Markup.back_menu()
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        channel = await XChannelRepo.add(title, url)
        await message.answer(
            f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"URL: {channel.url}",
            reply_markup=Markup.back_menu()
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ X –∫–∞–Ω–∞–ª–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞",
            reply_markup=Markup.back_menu()
        )
