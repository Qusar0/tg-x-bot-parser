from aiogram import Router, types
from aiogram.types import BufferedInputFile
from loguru import logger

from app.bot.routers.admin.x_channels.Markup import Markup
from app.bot.routers.admin.x_channels.handlers.add.loading_excel_x_channel import ExcelXChannelParser
from app.database.repo.XChannel import XChannelRepo
from app.bot.callback_data import x_channels_add_excel_cb

router = Router()


@router.callback_query(lambda c: c.data == x_channels_add_excel_cb)
async def add_x_channels_excel_handler(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞
    template_data = ExcelXChannelParser.create_template_excel()
    
    await callback.message.edit_text(
        "üìó <b>–ó–∞–≥—Ä—É–∑–∫–∞ X –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Excel</b>\n\n"
        "–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–æ–≤.\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.",
        reply_markup=Markup.back_menu()
    )
    
    await callback.message.answer_document(
        BufferedInputFile(
            template_data,
            filename="x_channels_template.xlsx"
        ),
        caption="üìó <b>–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ X –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ."
    )
    
    await callback.answer()


@router.message(lambda m: m.document and m.document.file_name.endswith(('.xlsx', '.xls')))
async def process_x_channels_excel_file(message: types.Message):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(message.document.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        channels, errors = ExcelXChannelParser.parse_excel_file(file_content.read())
        
        if errors:
            error_text = "‚ùå <b>–û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ:</b>\n\n" + "\n".join(errors)
            if len(error_text) > 4096:
                await message.answer_document(
                    BufferedInputFile(
                        error_text.encode('utf-8'),
                        filename="errors.txt"
                    ),
                    caption="‚ùå <b>–û—à–∏–±–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ</b>"
                )
            else:
                await message.answer(error_text)
            return
        
        if not channels:
            await message.answer("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        added_count = 0
        skipped_count = 0
        
        for channel_data in channels:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª
                existing_channel = await XChannelRepo.get_by_url(channel_data['link'])
                if existing_channel:
                    skipped_count += 1
                    logger.info(f"–ö–∞–Ω–∞–ª {channel_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
                await XChannelRepo.add(channel_data['name'], channel_data['link'])
                added_count += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_data['name']} - {channel_data['link']}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_data['name']}: {e}")
                skipped_count += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(channels)}"
        )
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

