from aiogram import Router, types
from loguru import logger

from app.bot.routers.admin.x_channels.Markup import Markup
from app.database.repo.XChannel import XChannelRepo
from app.bot.callback_data import x_channels_remove_cb, XChannelDeleteCb

router = Router()


@router.callback_query(lambda c: c.data == x_channels_remove_cb)
async def remove_x_channels_handler(callback: types.CallbackQuery):
    channels = await XChannelRepo.get_all()
    
    if not channels:
        await callback.message.edit_text(
            "üîó <b>–£–¥–∞–ª–µ–Ω–∏–µ X –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç",
            reply_markup=Markup.back_menu()
        )
    else:
        await callback.message.edit_text(
            "üîó <b>–£–¥–∞–ª–µ–Ω–∏–µ X –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=await Markup.remove_x_channels()
        )
    
    await callback.answer()


@router.callback_query(XChannelDeleteCb.filter())
async def delete_x_channel_handler(callback: types.CallbackQuery, callback_data: XChannelDeleteCb):
    try:
        channel = await XChannelRepo.get_by_id(callback_data.channel_id)
        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        success = await XChannelRepo.delete(callback_data.channel_id)
        if success:
            await callback.message.edit_text(
                f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> —É–¥–∞–ª–µ–Ω!",
                reply_markup=await Markup.remove_x_channels()
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ X –∫–∞–Ω–∞–ª–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
    await callback.answer()

