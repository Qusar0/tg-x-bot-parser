import asyncio
import app.bot.routers.admin.chats.global_state as global_state
from loguru import logger
from typing import List, Union
from aiogram import types
from aiogram.fsm.context import FSMContext
from pyrogram.errors import FloodWait, UserNotParticipant, UsernameNotOccupied, UsernameInvalid

from app.bot.routers.admin.chats.Markup import Markup
from app.userbot.userbot_manager import userbot_manager

from app.database.repo.Chat import ChatRepo

from app.bot.routers.admin.chats.error_handlers import error_flood_wait_handler, error_handler, chat_not_exists_handler, error_username_not_occupied_handler
from app.bot.routers.admin.chats.errors import ChatNotExistError
from app.config import config


async def reset_store(state: FSMContext) -> None:
    global_state.is_deleting = False
    global_state.deleted_usernames = []
    global_state.deleted_error_usernames = []

    await state.set_state(None)


async def send_deleted_chat_message_and_sleep(message: types.Message, chat_entity: str, is_last: bool) -> None:
    time_interval = config.get_sleep_time()

    if is_last:
        await message.reply(
            f"–ß–∞—Ç <b>{chat_entity}</b> - —É–¥–∞–ª–µ–Ω! ‚úÖ",
            reply_markup=Markup.remove(),
        )
    else:
        await message.reply(
            f"–ö–∞–Ω–∞–ª <b>{chat_entity}</b> - —É–¥–∞–ª–µ–Ω! ‚úÖ\n‚è≥ –°–ø–ª—é: {time_interval} —Å–µ–∫",
            reply_markup=Markup.cancel_action(),
        )

        await asyncio.sleep(time_interval)


async def cancel_delete_chat(message: types.Message, state: FSMContext, is_done=True) -> None:
    try:
        if not is_done:
            await message.answer("üö´ –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤", reply_markup=Markup.remove())

        title = "–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n" if is_done else "–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"

        deleted_usernames_count = len(global_state.deleted_usernames)
        deleted_error_usernames_count = len(global_state.deleted_error_usernames)

        deleted_chats = "\n".join(global_state.deleted_usernames) if global_state.deleted_usernames else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        error_chats = (
            "\n".join(global_state.deleted_error_usernames) if global_state.deleted_error_usernames else "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        )

        response_template = str(
            title + "‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n" + deleted_chats + "\n\nüö´ –ù–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n" + error_chats
        )

        if deleted_usernames_count + deleted_error_usernames_count == 0:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=Markup.open_menu())
        elif deleted_usernames_count + deleted_error_usernames_count == 1:
            await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —á–∞—Ç–æ–≤", reply_markup=Markup.open_menu())
        else:
            if len(response_template) <= 4096:
                await message.answer(response_template, reply_markup=Markup.open_menu())
            else:
                await message.answer_document(
                    types.BufferedInputFile(response_template.encode(), filename="–£–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.txt"),
                    reply_markup=Markup.open_menu(),
                )
    finally:
        await reset_store(state)


async def leave_chat(chat_entity: Union[str, int]) -> bool:
    try:
        candidate = await ChatRepo.get_by_entity(chat_entity)
        if not candidate:
            raise ChatNotExistError()

        await userbot_manager.leave_chat(chat_entity)

        await ChatRepo.delete(candidate.telegram_id)
        global_state.deleted_usernames.append(str(chat_entity))
        return True
    except UserNotParticipant:
        logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç—É –≤ –≥—Ä—É–ø–ø–µ: {chat_entity}")
        await ChatRepo.delete(candidate.telegram_id)
        global_state.deleted_usernames.append(chat_entity)
        return True
    except UsernameNotOccupied:
        logger.warning(f"Username –Ω–µ –∑–∞–Ω—è—Ç: {chat_entity}")
        await ChatRepo.delete(candidate.telegram_id)
        global_state.deleted_usernames.append(chat_entity)
        return True
    except UsernameInvalid:
        logger.warning(f"Username –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {chat_entity}")
        await ChatRepo.delete(candidate.telegram_id)
        global_state.deleted_usernames.append(chat_entity)
        return True
    except Exception as ex:
        global_state.deleted_error_usernames.append(chat_entity)
        raise ex


async def start_delete_chat(message: types.Message, state: FSMContext, chat_entities: List[str]) -> None:
    await message.answer(f"<b>–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {len(chat_entities)}</b>")

    for chat_entity in chat_entities:
        try:
            is_last = chat_entity == chat_entities[-1]
            is_deleted = await leave_chat(chat_entity)
            if is_deleted:
                await send_deleted_chat_message_and_sleep(message, chat_entity, is_last)
        except ChatNotExistError:
            await chat_not_exists_handler(message, chat_entity, is_last)
        except FloodWait as ex:
            await error_flood_wait_handler(ex, message, chat_entity, is_last)
        except (UsernameNotOccupied, UsernameInvalid):
            await error_username_not_occupied_handler(message, chat_entity, is_last)
        except Exception as ex:
            await error_handler(ex, message, chat_entity, is_last)

    return await cancel_delete_chat(message, state, True)
