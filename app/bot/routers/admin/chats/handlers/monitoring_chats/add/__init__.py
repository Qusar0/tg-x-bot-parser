import asyncio
import app.bot.routers.admin.chats.global_state as global_state
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from app.bot.routers.admin import admin_router
from app.bot.callback_data import (
    chats_add_cb,
    chats_add_excel_cb,
    chats_choose_add_cb,
    chats_add_loaded_chat_cb,
    chats_load_from_account,
    ChooseChatCb,
    NavigationChatCb,
)
from app.bot.routers.admin.chats.helpers import extract_chat_entities
from app.bot.routers.admin.chats.Markup import Markup
from app.bot.routers.admin.chats.State import ChatsState
from app.database.models import Chat
from app.bot.routers.admin.chats.handlers.monitoring_chats.add.business import start_subscribe, cancel_add_chat
from app.bot.routers.admin.chats.phrases import cancel_chat_action
from app.userbot.userbot_manager import userbot_manager
from app.database.repo.Chat import ChatRepo
from app.bot.routers.admin.chats.template import get_loaded_chats_template
from app.bot.routers.admin.chats.handlers.monitoring_chats.add.loading_excel import ExcelChatParser

IS_LOADING_CHATS = False
CHATS = []


@admin_router.callback_query(F.data == chats_choose_add_cb)
async def monitoring_chats_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await cb.message.edit_text(
        "<b>üí¨ –ü–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤</b>",
        reply_markup=Markup.choose_add_chats(),
    )


@admin_router.message(ChatsState.add, F.text == cancel_chat_action)
async def cancel_action(message: types.Message, state: FSMContext):
    await state.set_state(None)
    if global_state.adding_async_task:
        global_state.adding_async_task.cancel()
        global_state.adding_async_task = None

    await cancel_add_chat(message, state, False)


@admin_router.callback_query(F.data == chats_add_cb)
async def chats_add_handler(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(ChatsState.add)
    await cb.message.edit_reply_markup(reply_markup=None)
    await cb.message.answer(
        """
‚úèÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Å–ª–µ–¥–∏—Ç—å:</b>

<i>üí° –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</i>
<code>@username
https://t.me/username
https://t.me/+abcd12345
https://t.me/AAAAabcd12345
</code>
""",
        reply_markup=Markup.cancel_action(),
    )


@admin_router.message(F.text, ChatsState.add)
async def chats_add_scene(message: types.Message, state: FSMContext):
    if global_state.is_adding:
        await message.answer("–Ø —É–∂–µ –¥–æ–±–∞–≤–ª—è—é –≥—Ä—É–ø–ø—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=Markup.cancel_action())
        return

    chat_entities = extract_chat_entities(message.text)
    if not chat_entities:
        await message.answer("<b>‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∞—Ç—ã</b>", reply_markup=Markup.cancel_action())
        return

    global_state.is_adding = True
    global_state.adding_async_task = asyncio.ensure_future(start_subscribe(message, state, chat_entities))
    await global_state.adding_async_task


@admin_router.callback_query(F.data == chats_load_from_account)
async def load_chats_from_account(cb: types.CallbackQuery, state: FSMContext):
    global IS_LOADING_CHATS
    global CHATS

    if IS_LOADING_CHATS:
        await cb.answer("‚ö†Ô∏è –£–∂–µ –≤—ã–≥—Ä—É–∂–∞—é —á–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ")
        return

    try:
        IS_LOADING_CHATS = True
        await cb.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤", show_alert=True)

        await state.set_state(None)
        chats = await userbot_manager.get_dialogs(is_only_groups=True)
        if not chats:
            await cb.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ß–∞—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=Markup.back_menu())
            return

        added_chats: list[Chat] = []

        for chat in chats:
            candidate = await ChatRepo.get_by_telegram_id(chat.id)
            if not candidate:
                # if chat.username:
                #     chat = await ChatRepo.add(
                #         chat.id,
                #         chat.title,
                #         f"@{chat.username}",
                #     )
                # else:
                #     chat = await ChatRepo.add(chat.id, chat.title)
                setattr(chat, "is_choose", False)
                added_chats.append(chat)

        if not added_chats:
            await cb.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ù–æ–≤—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=Markup.back_menu())
            return

        CHATS = added_chats

        await cb.message.edit_text(
            "üëá –ü–æ–∂–∞–ª—É—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã: ",
            reply_markup=Markup.nav_show_chats_from_account(CHATS),
        )

        # raw_template, html_template = get_loaded_chats_template(added_chats)
        # if len(raw_template) < 4096:
        #     await cb.message.edit_text(
        #         html_template,
        #         reply_markup=Markup.back_monitoring_chat(),
        #     )
        # else:
        #     await cb.message.answer_document(
        #         types.BufferedInputFile(raw_template.encode(), filename="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.txt"),
        #         reply_markup=Markup.delete_document(),
        #     )

    finally:
        IS_LOADING_CHATS = False


@admin_router.callback_query(ChooseChatCb.filter())
async def choose_chat_choose(cb: types.CallbackQuery, callback_data: ChooseChatCb):
    for chat in CHATS:
        if chat.id == callback_data.chat_id:
            chat.is_choose = not callback_data.is_choose

    await cb.message.edit_reply_markup(
        reply_markup=Markup.nav_show_chats_from_account(CHATS, callback_data.page),
    )


@admin_router.callback_query(NavigationChatCb.filter())
async def navigate_buttons(cb: types.CallbackQuery, callback_data: NavigationChatCb):
    direction = callback_data.direction
    page = callback_data.page

    if direction == "left":
        page -= 1
    elif direction == "right":
        page += 1

    await cb.message.edit_reply_markup(
        reply_markup=Markup.nav_show_chats_from_account(CHATS, page),
    )


@admin_router.callback_query(F.data == chats_add_loaded_chat_cb)
async def save_loaded_chats(cb: types.CallbackQuery):
    added_chats = list(filter(lambda chat: chat.is_choose, CHATS))
    chats = []
    if not added_chats:
        await cb.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—å –æ–¥–∏–Ω —á–∞—Ç", show_alert=True)
        return

    for chat in added_chats:
        try:
            if chat.username:
                chat = await ChatRepo.add(chat.id, chat.title, f"@{chat.username}")
            else:
                chat = await ChatRepo.add(chat.id, chat.title)
        except Exception:
            chat = await ChatRepo.get_by_telegram_id(chat.id)
        chats.append(chat)

    _, html_template = get_loaded_chats_template(chats)
    await cb.message.edit_text(
        html_template,
        reply_markup=Markup.back_monitoring_chat(),
    )


@admin_router.callback_query(F.data == chats_add_excel_cb)
async def chats_add_excel_handler(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(ChatsState.add_excel)
    await cb.message.edit_reply_markup(reply_markup=None)

    template_content = ExcelChatParser.create_template_excel()
    template_file = types.BufferedInputFile(
        template_content,
        filename="–®–∞–±–ª–æ–Ω —á–∞—Ç–æ–≤.xlsx"
    )

    await cb.message.answer_document(
        template_file,
        caption="""
üìä <b>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞</b>

üìã <b>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</b>
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 1: <code>–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞</code>
‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 2: <code>–°—Å—ã–ª–∫–∞</code>

üí° <b>–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</b>
<code>@username
https://t.me/username
https://t.me/+abcd12345
https://t.me/AAAAabcd12345
1234567890</code>

üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx) —Å –≤–∞—à–∏–º–∏ —á–∞—Ç–∞–º–∏</b>

‚¨ÜÔ∏è –í—ã—à–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
""",
        reply_markup=Markup.cancel_action(),
    )


@admin_router.message(F.document, ChatsState.add_excel)
async def process_excel_file(message: types.Message, state: FSMContext):
    if global_state.is_adding:
        await message.answer("–Ø —É–∂–µ –¥–æ–±–∞–≤–ª—è—é –≥—Ä—É–ø–ø—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=Markup.cancel_action())
        return

    document = message.document

    await message.answer("‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é Excel —Ñ–∞–π–ª...</b>")

    file = await message.bot.get_file(document.file_id)
    file_content = await message.bot.download_file(file.file_path)

    chats_data, parsing_errors = ExcelChatParser.parse_excel_file(file_content.getvalue())

    if not chats_data:
        await message.answer(
            "‚ö†Ô∏è <b>–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>",
            reply_markup=Markup.cancel_action()
        )
        return

    chat_entities = [chat['link'] for chat in chats_data]

    await message.answer(f"‚úÖ <b>–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chat_entities)}")

    global_state.is_adding = True
    global_state.adding_async_task = asyncio.ensure_future(start_subscribe(message, state, chat_entities))
    await global_state.adding_async_task


@admin_router.message(ChatsState.add_excel, F.text == cancel_chat_action)
async def cancel_excel_action(message: types.Message, state: FSMContext):
    await state.set_state(None)
    if global_state.adding_async_task:
        global_state.adding_async_task.cancel()
        global_state.adding_async_task = None

    await cancel_add_chat(message, state, False)
