from aiogram import types, F
from aiogram.fsm.context import FSMContext
from app.bot.routers.admin import admin_router
from app.bot.routers.admin.chats.Markup import Markup
from app.database.repo.Chat import ChatRepo
from app.bot.callback_data import (
    chats_re_evaluation_cb,
    chats_without_rating_cb,
    chats_change_rating_cb,
    ChatRatingCb,
)


@admin_router.callback_query(F.data == chats_change_rating_cb)
async def rating_chats_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await cb.message.edit_text(
        "<b>üèÜ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=Markup.rating_chats_menu()
    )


@admin_router.callback_query(F.data == chats_without_rating_cb)
async def show_zero_rating_chats(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    chats = await ChatRepo.get_by_rating(0)

    if not chats:
        await cb.answer("‚úÖ –í—Å–µ —á–∞—Ç—ã —É–∂–µ –æ—Ü–µ–Ω–µ–Ω—ã!", show_alert=True)
        return

    await cb.answer()
    await cb.message.edit_text(
        f"<b>üèÜ –ß–∞—Ç—ã –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞ ({len(chats)} —à—Ç.)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=Markup.chat_list_for_rating(chats, chats_change_rating_cb)
    )


@admin_router.callback_query(F.data == chats_re_evaluation_cb)
async def show_all_chats_for_reevaluation(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    chats = await ChatRepo.get_all()

    if not chats:
        await cb.answer("‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    await cb.answer()
    await cb.message.edit_text(
        f"<b>ü§ö –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —á–∞—Ç–æ–≤ ({len(chats)} —à—Ç.)</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=Markup.chat_list_for_rating(chats, chats_change_rating_cb)
    )


@admin_router.callback_query(F.data.startswith("rate_chat_"))
async def choose_rating_for_chat(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)

    chat_id = int(cb.data.replace("rate_chat_", ""))

    chat = await ChatRepo.get_by_telegram_id(chat_id)

    if not chat:
        await cb.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await cb.answer()
    current_rating = f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê{chat.rating}" if chat.rating > 0 else "–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚ùå –Ω–µ –æ—Ü–µ–Ω—ë–Ω"

    await cb.message.edit_text(
        f"<b>üèÜ –û—Ü–µ–Ω–∫–∞ —á–∞—Ç–∞</b>\n\n"
        f"<b>–ß–∞—Ç:</b> {chat.title}\n"
        f"<b>{current_rating}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 10:",
        reply_markup=Markup.rating_keyboard(chat_id)
    )


@admin_router.callback_query(ChatRatingCb.filter())
async def handle_rating_selection(cb: types.CallbackQuery, callback_data: ChatRatingCb, state: FSMContext):
    await state.set_state(None)

    chat_id = callback_data.chat_id
    rating = callback_data.rating

    success = await ChatRepo.update_rating(chat_id, rating)

    if success:
        chat = await ChatRepo.get_by_telegram_id(chat_id)

        await cb.answer(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating}", show_alert=True)
        await cb.message.edit_text(
            f"<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
            f"<b>–ß–∞—Ç:</b> {chat.title}\n"
            f"<b>–ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</b>‚úÖ {rating}",
            reply_markup=Markup.rating_chats_menu()
        )
    else:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)
